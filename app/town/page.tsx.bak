import { auth } from "@/auth"
import { redirect } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import WalletSection from "@/components/wallet-section"
import HeroSection from "../../components/hero-section"

export default async function TownPage() {
  const session = await auth()
  
  // If not signed in, show login page
  if (!session?.user?.email) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <div className="bg-white p-8 rounded-lg shadow-md">
          <h1 className="text-3xl font-bold mb-6">Welcome to Town</h1>
          <p className="mb-8">Please sign in to continue</p>
          <Link 
            href="/auth/signin?callbackUrl=/town"
            className="block w-full text-center bg-primary hover:bg-primary/90 text-white font-bold py-2 px-4 rounded"
          >
            Sign In
          </Link>
        </div>
      </div>
    )
  }

  // If signed in, show the town page with sections
  return (
    <div className="container mx-auto py-4">
      <div className="flex items-center justify-between mb-4">
        <div>
          <h1 className="text-3xl font-bold">Welcome to Town</h1>
          <p>Hello, {session.user.name || session.user.email}</p>
        </div>
        
        {/* Wallet Connection Section */}
        <WalletSection />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
        {/* Your NFTs Section */}
        <Card className="h-64">
          <CardHeader>
            <CardTitle>Your NFTs</CardTitle>
            <CardDescription>View and manage your NFT collection</CardDescription>
          </CardHeader>
          <CardContent className="h-24 flex items-center justify-center">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* 左侧：NFT 列表 */}
            <div>
              <h3 className="text-sm font-medium mb-3">Your NFTs</h3>
              {ethereumAddress ? (
                <div className="text-xs text-gray-500 mb-2">
                  Wallet: {ethereumAddress.slice(0, 6)}...{ethereumAddress.slice(-4)}
                </div>
              ) : (
                <div className="text-xs text-gray-500 mb-2">
                  Wallet not connected
                </div>
              )}
              
              {isLoading && !nfts.length ? (
                <div className="flex items-center justify-center h-24">
                  <p>Loading NFTs...</p>
                </div>
              ) : nfts.length > 0 ? (
                <div className="space-y-3">
                  <div className="text-xs text-gray-500">
                    Found {nfts.length} NFTs in your wallet
                  </div>
                  <div className="grid grid-cols-2 gap-3">
                    {nfts.map((nft) => (
                      <div 
                        key={nft.tokenId}
                        onClick={() => setSelectedNft(nft)}
                        className={`border rounded-lg p-2 cursor-pointer transition-all ${
                          selectedNft?.tokenId === nft.tokenId 
                            ? 'border-blue-500 bg-blue-50' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        {/* NFT 图像 */}
                        {nft.metadata?.image ? (
                          <div className="aspect-square w-full mb-2 overflow-hidden rounded-md">
                            <img 
                              src={nft.metadata.image.startsWith('ipfs://') 
                                ? nft.metadata.image.replace('ipfs://', 'https://ipfs.io/ipfs/') 
                                : nft.metadata.image
                              } 
                              alt={`NFT #${nft.tokenId}`}
                              className="w-full h-full object-cover"
                              onError={(e) => {
                                (e.target as HTMLImageElement).src = 'https://placehold.co/200x200?text=NFT';
                              }}
                            />
                          </div>
                        ) : (
                          <div className="aspect-square w-full mb-2 bg-gray-100 flex items-center justify-center rounded-md">
                            <span className="text-gray-500 text-xs">NFT #{nft.tokenId}</span>
                          </div>
                        )}
                        
                        {/* NFT 信息 */}
                        <div className="space-y-1">
                          <p className="font-medium text-xs truncate">
                            {nft.metadata?.name || `NFT #${nft.tokenId}`}
                          </p>
                          <p className="text-xs text-gray-500">
                            ID: {nft.tokenId}
                          </p>
                          {nft.metadata?.attributes && nft.metadata.attributes.length > 0 && (
                            <div className="flex flex-wrap gap-1 mt-1">
                              {nft.metadata.attributes.slice(0, 2).map((attr: any, index: number) => (
                                <span 
                                  key={index} 
                                  className="text-xs bg-gray-100 px-1.5 py-0.5 rounded"
                                >
                                  {attr.trait_type}: {attr.value}
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ) : currentNetwork === 'ethereum' ? (
                <p className="text-sm text-gray-500">No NFTs found in your wallet</p>
              ) : (
                <p className="text-sm text-gray-500">Connect your Ethereum wallet to view NFTs</p>
              )}
            </div>
            
            {/* 右侧：英雄信息 */}
            <div>
              <h3 className="text-sm font-medium mb-3">Hero Information</h3>
              {isLoading && selectedNft ? (
                <div className="flex items-center justify-center h-24">
                  <p>Loading hero information...</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {/* 合约错误信息 */}
                  {contractError && (
                    <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-md text-sm text-yellow-800">
                      <p className="font-medium">Contract Error</p>
                      <p className="text-xs mt-1">{contractError}</p>
                      {heroNotFound && (
                        <p className="text-xs mt-2">No hero found for this NFT. You can create a new one.</p>
                      )}
                    </div>
                  )}
                  
                  {/* 调试信息 */}
                  {debugInfo.length > 0 && (
                    <div className="p-3 bg-gray-50 border border-gray-200 rounded-md text-xs text-gray-700 max-h-40 overflow-y-auto">
                      <p className="font-medium mb-1">Debug Info:</p>
                      {debugInfo.map((info, index) => (
                        <p key={index} className="mb-1">{info}</p>
                      ))}
                    </div>
                  )}
                  
                  {/* 英雄信息 */}
                  {hero ? (
                    <div className="space-y-2">
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <p><strong>Name:</strong> {hero.name}</p>
                        <p><strong>Level:</strong> {hero.level} | <strong>Points:</strong> {hero.points}</p>
                        {hero.tokenId && (
                          <p className="text-xs text-green-600">
                            <strong>Token ID:</strong> {hero.tokenId}
                          </p>
                        )}
                      </div>
                    </div>
                  ) : selectedNft && heroNotFound ? (
                    <div className="space-y-2">
                      <Input
                        type="text"
                        placeholder="Enter hero name"
                        value={heroName}
                        onChange={(e) => setHeroName(e.target.value)}
                        className="w-full"
                      />
                      <Button
                        onClick={createHero}
                        disabled={isCreating}
                        className="w-full"
                      >
                        {isCreating ? 'Creating Hero...' : 'Create Hero with Selected NFT'}
                      </Button>
                    </div>
                  ) : selectedNft ? (
                    <p className="text-sm text-gray-500">Checking hero information...</p>
                  ) : (
                    <p className="text-sm text-gray-500">Select an NFT to view or create a hero</p>
                  )}
                </div>
              )}
            </div>
          </div>            
          </CardContent>
          <CardFooter>
            <Link href="/town/ethereum">
              <Button className="w-full">View NFTs</Button>
            </Link>
          </CardFooter>
        </Card>
        
        {/* Your Heroes Section */}
        <HeroSection user={session.user} />
        
        {/* Your Assets Section */}
        <Card className="h-64">
          <CardHeader>
            <CardTitle>Your Assets</CardTitle>
            <CardDescription>View your tokens and other assets</CardDescription>
          </CardHeader>
          <CardContent className="h-24 flex items-center justify-center">
            <p className="text-muted-foreground">No assets found</p>
          </CardContent>
          <CardFooter>
            <Link href="/town/aptos">
              <Button className="w-full">View Assets</Button>
            </Link>
          </CardFooter>
        </Card>
        
        {/* Buy in Shop Section */}
        <Card className="h-64">
          <CardHeader>
            <CardTitle>Buy in Shop</CardTitle>
            <CardDescription>Purchase new items and upgrades</CardDescription>
          </CardHeader>
          <CardContent className="h-24 flex items-center justify-center">
            <p className="text-muted-foreground">Shop coming soon</p>
          </CardContent>
          <CardFooter>
            <Button className="w-full" disabled>Visit Shop</Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  )
}