generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  image           String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  emailVerified   DateTime?        @map("email_verified")
  accounts        Account[]
  issuedCoupons   IssuedCoupon[]
  merchantProfile MerchantProfile?
  playerProfile   PlayerProfile?
  sessions        Session[]
  transactions    Transaction[]
  merchantTransactions Transaction[] @relation("MerchantTransactions")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PlayerProfile {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  walletAddress String   @unique @map("wallet_address")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  pointsBalance Int      @default(0) @map("points_balance")
  user          User     @relation(fields: [userId], references: [id])

  @@map("player_profiles")
}

model MerchantProfile {
  id            String           @id @default(cuid())
  userId        String           @unique @map("user_id")
  businessName  String           @map("business_name")
  description   String?
  address       String?
  location      Json?
  images        String[]
  pointsBalance Int              @default(0) @map("points_balance")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  coupons       CouponTemplate[]
  user          User             @relation(fields: [userId], references: [id])
  rechargeCodes RechargeCode[]

  @@map("merchant_profiles")
}

model CouponCategory {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now()) @map("created_at")
  coupons     CouponTemplate[]

  @@map("coupon_categories")
}

model PromotionType {
  id               String           @id @default(cuid())
  type             String           @unique
  name             String
  basePoints       Int
  affect           String
  calculate        String
  description      String
  defaultNum       Float?
  requirePeopleNum Int?
  condition        Int?
  timeLimit        Boolean          @default(false)
  payType          String?
  payNum           Int?
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  coupons          CouponTemplate[] @relation("PromotionTypeToCouponTemplate")

  @@map("promotion_types")
}

model CouponTemplate {
  id                String          @id @default(cuid())
  merchantId        String          @map("merchant_id")
  categoryId        String          @map("category_id")
  name              String
  description       String?
  image             String?
  discountType      String          @map("discount_type")
  discountValue     Decimal         @map("discount_value")
  totalQuantity     Int             @map("total_quantity")
  remainingQuantity Int             @map("remaining_quantity")
  startDate         DateTime        @map("start_date")
  endDate           DateTime        @map("end_date")
  status            String          @default("active")
  createdAt         DateTime        @default(now()) @map("created_at")
  settings          Json
  publishPrice      Int             @map("publish_price")
  sellPrice         Int             @default(30) @map("sell_price")
  promotionType     String          @map("promotion_type")
  category          CouponCategory  @relation(fields: [categoryId], references: [id])
  merchant          MerchantProfile @relation(fields: [merchantId], references: [id])
  promotion         PromotionType   @relation("PromotionTypeToCouponTemplate", fields: [promotionType], references: [type])
  issuedCoupons     IssuedCoupon[]
  transactions      Transaction[]

  @@map("coupon_templates")
}

model IssuedCoupon {
  id         String         @id @default(cuid())
  templateId String         @map("template_id")
  userId     String         @map("user_id")
  passCode   String         @unique @map("pass_code")
  qrCode     String?        @map("qr_code")
  status     String         @default("unused")
  usedAt     DateTime?      @map("used_at")
  createdAt  DateTime       @default(now()) @map("created_at")
  buyPrice   Int            @map("buy_price")
  template   CouponTemplate @relation(fields: [templateId], references: [id])
  user       User           @relation(fields: [userId], references: [id])

  @@map("issued_coupons")
}

model RechargeCode {
  id         String          @id @default(cuid())
  code       String          @unique
  points     Int
  merchantId String          @map("merchant_id")
  status     String          @default("unused")
  usedAt     DateTime?       @map("used_at")
  createdAt  DateTime        @default(now()) @map("created_at")
  merchant   MerchantProfile @relation(fields: [merchantId], references: [id])

  @@map("recharge_codes")
}

model Transaction {
  id         String          @id @default(cuid())
  userId     String          @map("user_id")
  merchantId String          @map("merchant_id")
  type       String
  amount     Int
  createdAt  DateTime        @default(now()) @map("created_at")
  status     String
  updatedAt  DateTime        @updatedAt @map("updated_at")
  couponId   String?         @map("coupon_id")
  quantity   Int             @default(1)
  coupon     CouponTemplate? @relation(fields: [couponId], references: [id])
  user       User            @relation(fields: [userId], references: [id])
  merchant   User            @relation("MerchantTransactions", fields: [merchantId], references: [id])

  @@map("transactions")
}
